import random

"""
Все функции библиотеки работают по равномерному закону. Равномерный закон означает, что значения случайных величин в 
диапазоне от x до y появляются с равной вероятностью.

Наиболее часто применяющиеся функции библиотеки random: 

Название        Описание

random          Возвращает случайное вещественное число в промежутке от 0 до 1.

uniform         Возвращает случайное вещественное число в указанном промежутке.

randint         Возвращает случайное целое число в пределах заданного промежутка.

randrange       Возвращает случайное целое число в пределах заданного промежутка (можно указать шаг).

gauss           Возвращает случайное вещественное число, основываясь на Гауссовом распределении.

choice          Возвращает случайный элемент из заданной последовательности.

shuffle         Перемешивает элементы случайным образом (работает только с изменяемыми объектами).
 
sample          Возвращает новый список со случайным выбором неповторяющихся элементов (2-м аргументом нужно указать 
                количество элементов в выбираемом списке).

seed            При запуске программы результат изменяться не будет (нужно указать начальное числовое значение).
"""

print(random.random())  # 0.20469115878442923
print(random.uniform(1, 5))  # 2.331169260901309
print(random.randint(-3, 7))  # 6
print(random.randrange(-3, 10, 2))  # 7

"""
На практике периодически нужно не равномерное распределение, а Гауссовское распределение. Т.е. случайные величины с 
нормальным законом распределения. На практике в жизни нас часто окружают случайные величины, которые подчиняются 
закону Гауссовских случайных величин.

Гауссовские случайные величины:

w(x)
^             -
|           -/|\-
|         --/ | \--
|      ----/  |  \----
|    -----/   |   \-----
|  ------/    |    \------
|------------|-|-------------------------> x
              mu
              
mu(на графике высота от пика до оси х) - математическое ожидание (среднее значение СВ);
sigma - среднеквадратическое отклонение (мера разброса относительно математического ожидания - промежуток от границы mu
до конца графика).

Кривая говорит о том, что случайные величины будут попадать в промежутке неподалёку от mu (пометил на оси х блоками). 
Чем дальше мы будем отходить от среднего значения, тем всё реже и реже у нас будут появляться соответствующие случайные 
величины. 

Ценность такого распределения в том, что ему подчиняются многие реальные события, например: колебания цен на нефть или 
различных товаров, шумы при радиопередачах, погрешности измерений и т.д. 

Для модуляции этого в Python есть функция gauss(mu, sigma) - случайное значение по гауссовскому закону (формальный 
диапазон не ограничен).
"""

print(random.gauss(0, 3.5))  # 3.6094677028413216 - 3.5 - это одно стандартное отклонение, в его пределах
# значения будут наиболее часто встречаться (соответственно, генерироваться). Но кривая распределения ими
# не ограничивается, и в пределах +- 2 стандартных отклонения (от -7 до 7) или +- 3 стандартных отклонения (от -10.5 до 10.5)
# значения тоже будут, только встречаться будут реже.

lst = [4, 5, 0, -1, 10, 76, 3]
print(random.choice(lst))  # 3
random.shuffle(lst)  # Меняет непосредственно сам список.
print(lst)  # [3, -1, 5, 4, 76, 10, 0]
print(random.sample(lst, 3))  # [-1, 5, 0]

"""
Отметим: при работе с псевдослучайными числами можно формировать одинаковые последовательности чисел при каждом новом 
запуске программы с помощью зерна генератора случайных чисел: 
"""

some_list = [random.randint(0, 10) for _ in range(20)]
print(some_list)  # Первый запуск - [10, 7, 4, 0, 3, 8, 4, 9, 10, 0, 9, 1, 8, 4, 1, 1, 8, 7, 5, 4],
# Второй запуск - [3, 0, 6, 2, 7, 5, 1, 0, 7, 0, 4, 2, 7, 10, 1, 0, 5, 2, 4, 8].

random.seed(123)
some_list = [random.randint(0, 10) for _ in range(20)]
print(some_list)  # Все запуски - [0, 4, 1, 6, 4, 1, 0, 6, 8, 8, 5, 5, 0, 2, 2, 5, 8, 5, 3, 2].
