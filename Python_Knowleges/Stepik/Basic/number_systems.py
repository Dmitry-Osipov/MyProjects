"""
В инженерных задачах часто требуется оперировать слишком большими или слишком маленькими числами, для чего существует
запись степени числа через e, используя синтаксис <число>e<целая степень десятки>:
500 = 5 * 100 = 5 * 10^2 = 5e2
0.01 = 1 * 0.01 = 1 * 10^-2 = 1e-2
0.00000001 = 1 * 10^-8 = 1e-8
6.02 * 10^23 = 6.02e23
"""

print(1e-2)
print(5e2)  # Все числа мы получаем вещественные, несмотря на то, что 500 - это целое число.
print(1e-8)  # 1e-08 - автоматически выводит запись в экспоненциальной форме для слишком малых или больших значений.

"""
Системы счисления:
десятичная, двоичная, шестнадцатеричная, восьмеричная.

123 = 1 * 10^2 + 2 * 10^1 + 3 * 10^0 - десятичная
001 = 0 * 2^2 + 0 * 2^1 + 1 * 2^1 = 1 - двоичная
1101 = 1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 13
1A = 1 * 16^1 + A * 16^0 = 26 - шестнадцатеричная
FB = F * 16^1 + B * 16^0
27 = 2 * 8^1 + 7 * 8^0 = 23 - восьмеричная
54 = 5 * 8^1 + 4 * 8^0 = 44

В Python мы можем прописать десятичное число в различных формах: 
"""

# Двоичная форма:
print(0b001)  # Вывод: 1
print(0b1101)  # Вывод: 13
print(-0b1111)  # Вывод: -15
print(bin(13))  # Вывод: 0b1101

# Шестнадцатеричная форма:
print(0x1A)  # Вывод: 26
print(0xde)  # Вывод: 222 - обращаем внимание, можно использовать и строчные, и заглавные буквы.
print(0xaa3f)  # Вывод: 43583
print(-0x34a)  # Вывод: -842
print(hex(389))  # Вывод: 0x185

# Восьмеричная система:
print(0o27)  # Вывод: 23
print(-0o777)  # Вывод: 511
print(oct(875))  # Вывод: 0o1553

# Также преобразовывать строки или числа вне десятичной системы к различным числам можно с помощью int():
print(int('12', 8))  # Вывод: 10 - указали к какой системе привязать строку.
print(int(0b11))  # Вывод: 3 - только к десятичной системе можно преобразовать.
print(int(0x1010))  # Вывод: 4112 - тоже только к десятичной системе.
