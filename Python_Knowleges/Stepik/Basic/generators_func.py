def get_list():
    for x in [1, 2, 3, 4]:
        return x


print(get_list())  # Как только встречается оператор return, то функция завершает свою работу.


def get_list():
    for x in [1, 2, 3, 4]:
        yield x


a = get_list()
print(a)  # При помощи оператора yield мы превратили обычную функцию в функцию-генератор, благодаря чему можно
# перебирать все значения списка.

print(next(a))  # 1
print(next(a))  # 2
print(next(a))  # 3
print(next(a))  # 4

"""
В итоге оператор yield возвращает текущее значение х, замораживает состояние функции до следующего вызова next.
Перейдём дальше - требуется определить среднее арифметическое:
"""


def get_list():
    for i in range(1, 10):
        a = range(i, 11)
        yield sum(a) / len(a)


a = get_list()
print(list(a))

"""
Получили вывод - [5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5], ибо были такие последовательности:
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
2, 3, 4, 5, 6, 7, 8, 9, 10
3, 4, 5, 6, 7, 8, 9, 10
4, 5, 6, 7, 8, 9, 10
5, 6, 7, 8, 9, 10
6, 7, 8, 9, 10
7, 8, 9, 10
8, 9, 10
9, 10
"""


def find_word(f, word):
    """
    Функция-генератор для поиска всех индексов слова в файле.

    @param f: Читаемый файл.
    @param word: Слово, которое требуется найти.
    @return: Индексы вхождения слова в тексте.
    """
    g_index = 0
    for line in f:
        index = 0
        while index != -1:
            index = line.find(word, index)
            if index > -1:
                yield g_index
                index += 1

        g_index += len(line)