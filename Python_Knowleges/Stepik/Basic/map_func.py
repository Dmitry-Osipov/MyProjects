"""
Функция map принимает в себя функцию, которую требуется выполнить для каждого элемента итерируемого объекта и сам
итерируемый объект, возвращая итератор, который можно перебрать:
"""

b = map(int, ['1', '2', '3', '4', '5'])
for digit in b:
    print(digit, end=' ')  # 1 2 3 4 5
print()

"""
Соответственно, как и с любым итератором, мы можем применять соответствующие функции list, tuple, sum, max и т.д.
Пропишем аналог функции map генератором:
"""

b = (int(x) for x in ['1', '2', '3', '4', '5'])
print(list(b))
print(list(b))  # Получаем пустой список: дважды пройтись ни по генератору, ни по map нельзя.

cities = ['Москва', 'Астрахань', 'Самара', 'Уфа', 'Смоленск', 'Тверь']
b = map(len, cities)
a = list(b)
print(a)  # Получили длину каждого города в списке.

"""
Таким образом, в map мы можем передать функцию, которая должна принимать 1 аргумент (или *args, как функция max). 
Попробуем преобразовать слова в верхний регистр:
"""

cities = ['Москва', 'Астрахань', 'Самара', 'Уфа', 'Смоленск', 'Тверь']
b = map(str.upper, cities)
a = list(b)
print(a)

"""
Также можно передать и свою функцию:
"""


def symbols(s):
    return list(s.lower())


b = map(symbols, cities)
a = list(b)
print(a)

"""
Конечно, если мы закладываем простой одноразовый функционал, то лучше написать лямбда-функцию:
"""

b = map(lambda s: s[::-1], cities)
print(list(b))
