import time

"""
Напишем алгоритм Евклида для поиска наименьшего общего делителя (НОД) для чисел a и b с использованием функции-теста.

Простой и медленный вариант алгоритма: есть a = 18 и b = 24, далее вычитаем и производим замену результата большего
числа -> b - a = 6 -> b = 6 a = 18 и т.д. -> 18 - 6 = 12 -> a = 12 b = 6 -> 12 - 6 = 6 -> a = 6 b = 6. И как только мы
увидели, что значения одинаковы, то алгоритм останавливается. На уровне псевдокода это выглядит так:
пока a != b:
    находим большее среди a и b
    уменьшаем большее не величину меньшего
выводим полученное значение величины a (или b)

НОД(18, 24) = 6
"""


def get_nod(a, b):
    """
    Вычисляется НОД для натуральных чисел a и b по медленному алгоритму Евклида.

    :param a: Первое натуральное число.
    :param b: Второе натуральное число.
    :return: НОД.
    """
    while a != b:
        if a > b:
            a -= b
        else:
            b -= a

    return a


print(get_nod(18, 24))
help(get_nod)  # Читаем описание функции по ссылке с помощью документации.


def test_node(func):
    # --- тест 1 ---
    a = 28
    b = 35
    res = func(a, b)
    if res == 7:
        print('--- тест 1 --- ok')
    else:
        print('--- тест 1 --- failed')

    # --- тест 2 ---
    a = 100
    b = 1
    res = func(a, b)
    if res == 1:
        print('--- тест 2 --- ok')
    else:
        print('--- тест 2 --- failed')

    # --- тест 3 ---
    a = 2
    b = 100000000
    st = time.time()
    res = func(a, b)
    et = time.time()
    dt = et - st
    if res == 2 and dt < 1:
        print('--- тест 3 --- ok')
    else:
        print('--- тест 3 --- failed')


test_node(get_nod)  # Видим провал теста на крайних значениях по времени, хоть и с верными результатами.

"""
Но тогда нам требуется прописать быстрый алгоритм Евклида. По факту серия наших вычитаний из медленного алгоритма есть 
ни что иное, как нахождение остатка от деления a % b = 0
На псевдокоде будет выглядеть так: 
пока меньшее число больше 0:
    большему числу присваиваем остаток от деления на меньшее число
выводим большее число
"""


def get_fast_nod(a, b):
    """
    Вычисляется НОД для натуральных чисел a и b по быстрому алгоритму Евклида.

    :param a: Первое натуральное число.
    :param b: Второе натуральное число.
    :return: НОД.
    """

    if a < b:
        a, b = b, a

    while b != 0:
        a, b = b, a % b

    return a


test_node(get_fast_nod)  # Теперь всё отработало.
