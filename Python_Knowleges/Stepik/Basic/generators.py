a = (x ** 2 for x in range(6))
print(a)  # Получаем чистый генератор (круглые скобки не означают генератор кортежей - такого нет).

print(next(a))  # Генератор так же является и итератором, так что с помощью next() можно получать значения.
print(next(a))
print(next(a))
print(next(a))
print(next(a))
print(next(a))
# print(next(a))  # Получаем исключение StopIteration. Перебор элементов можно осуществлять лишь раз.

a = (x ** 2 for x in range(6))
print(list(a))  # Получили список из нашего генератора.

a = (x ** 2 for x in range(6))
print(sum(a))

print(max((x ** 2 for x in range(6))))  # Генератор также можно положить внутрь функции.

# lst = list(range(1000000000000000000))  # Получаем ошибку MemoryError.

"""
Однако генератор  поможет нам создать такой огромный список, ибо все элементы не будут единовременно храниться в 
памяти, а будут формироваться по мере перебора этого генератора:
"""

lst = (x for x in range(1000000000000000000))
for number in lst:
    print(number, end=' ')
    if number >= 50:
        print()
        break

"""
Получили первые 51 элемент без вылета исключения. Однако у генераторов есть и свои минусы. Например, у него нельзя 
узнать длину: 
"""

a = (x for x in range(10, 20))
# print(len(a))  # TypeError: object of type 'generator' has no len().

"""
Получили ожидаемую ошибку, ибо генератор не сформировал своих значений, а значит, функция len не может знать длину 
генератора. По аналогичной логике к элементам генератора нельзя обратиться по индексу. Теперь посмотрим, что будет, 
если засунуть классический генератор в список без функции list:
"""

a = [(x for x in range(6))]
print(a)  # Получаем список с одним элементом - ссылку на генератор. Соответственно, если нужен генератор списков, то
# требуется убрать круглые скобки.
