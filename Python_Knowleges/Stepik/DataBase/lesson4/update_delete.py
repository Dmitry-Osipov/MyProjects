import sqlite3 as sq

with sq.connect('saper.db') as con:
    cur = con.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users (
    name TEXT NOT NULL,
    sex INTEGER NOT NULL DEFAULT 1,
    old INTEGER, 
    score INTEGER
    )""")

"""
UPDATE - изменение данных в записях;
DELETE - удаление записей из таблицы.

Синтаксис UPDATE:
UPDATE имя_таблицы SET имя_столбца=новое_значение, имя_столбца2=новое_значение2 WHERE условие

С помощью UPDATE сделаем обнуление очков у наших игроков в программе для БД:
UPDATE users SET score = 0

Получаем:
Execution finished without errors.
Result: запрос успешно выполнен. Заняло 5мс, 7 строк изменено
At line 1:
UPDATE users SET score = 0

Конечно, на практике именно такая реализация по стиранию всей БД встречается крайне редко. Обычно она сопровождается 
крайне строгим фильтром. Изменим это:
UPDATE users SET score = 1000 WHERE rowid == 1 - для первой записи ставим количество очков равное 1000, у остальных 0.
UPDATE users SET score = score + 500 WHERE sex == 2 - всем игрокам женского пола добавили 500 очков от их количества очков.
UPDATE users SET score = score + 500 WHERE name LIKE 'Фёдор' - параметр LIKE возвращает True, когда увидит точное совпадение всех символов.

В LIKE мы можем прописывать не только какое-то конкретное значение, но и шаблон, в котором можно использовать:
% - любое продолжение строки;
_ - любой символ (один символ).

UPDATE users SET score = score + 200 WHERE name LIKE 'M%' - присвоить 200 очков тому, у кого имя начинается с М 
(кодировка и кейсы важны).
UPDATE users SET score = score + 100 WHERE name LIKE 'С_рг%' - присвоить 100 очков, у кого имя начинается с С, а через 
1 символ иду буквы рг, а потом любые символы.

На примерах выше мы увидели, как работает оператор LIKE, но на практике злоупотреблять сравнением строк не стоит, ибо 
это достаточно ресурсоёмкая операция. Гораздо проще выполнять сравнения чисел, и именно так следует задавать сравнения.

UPDATE users SET score = 800, old = 45 WHERE old >= 40 - для игроков с возрастом больше или равным 40 заменить очки на 
800, а также обновить их возраст до 45.

Далее рассмотрим синтаксис команды DELETE:
DELETE FROM имя_таблицы WHERE условие

Причём условие записывают очень строгим, чтобы не удалить какие-то лишние записи. Часто для этого используют скрытое 
поле rowid для выборки нужных записей. Например:
DELETE FROM users WHERE rowid IN (2, 5) - удаляем записи, у которых rowid == 2 или row_id == 5.

А теперь проверим, какие у нас остались rowid (можно выделить нужную команду в программе, и тогда выполнится только она):
SELECT rowid, * FROM users - видим, что теперь у нас нет строк с таким значением для rowid.

Причём если добавить новую запись INSERT INTO users VALUES ('Даша', 2, 24, 1200) - мы увидим, что она добавляется новой 
строчкой далее, а не заменяет предыдущие. Отсюда вывод: rowid не равно порядковому значению пользователя в записи, это 
лишь некое уникальное числовое значение записи и не более того.
"""
