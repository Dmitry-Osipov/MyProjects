import re

text = "lat = 5, lon=7, a=5"
match = re.findall(f"\w+\s*=\s*\d+", text)
print(match)

"""
Наш шаблон сейчас учитывает вообще все ключи, но что, если нам нужно, чтобы учитывались только ключи lat и lon?
"""

match = re.findall(f"lat\s*=\s*\d+|lon\s*=\s*\d+", text)  # Но теперь у нас дублируется код. Нам помогут
# группирующие скобки.
print(match)

match = re.findall(r"(?:lat|lon)\s*=\s*\d+", text)  # Знак вопроса и двоеточие говорят, что эти группирующие
# скобки будут несохраняющими.
print(match)  # Вывод: ['lat = 5', 'lon=7']

match = re.findall(r"(lat|lon)\s*=\s*\d+", text)  # Теперь мы получили сохраняющую группировку, т.е. для каждого
# найденного вхождения будут сохраняться соответствующий ключ
print(match)  # Вывод: ['lat', 'lon']

match = re.findall(r"((lat|lon)\s*=\s*\d+)", text)  # Теперь видим оба уровня сохранения.
print(match)  # Вывод: [('lat = 5', 'lat'), ('lon=7', 'lon')]

match = re.findall(r"(lat|lon)\s*=\s*(\d+)", text)  # Теперь отдельно сохраняем ключи и значения, но в один кортеж.
print(match)  # Вывод: [('lat', '5'), ('lon', '7')]

match = re.findall(r"(lat|lon)\s*=\s*(?:\d+)", text)  # Теперь второе значение сохраняться не будет.
print(match)  # Вывод: ['lat', 'lon']

text = "<p>Картинка <img src='bg.jpg'> в тексте</p>"
match = re.findall(r"<img\s+[^>]*src=[\"'](.+?)[\"']", text)  # Определяем тэг img, далее пробелы, затем возможные
# произвольные символы (исключая закрывающую скобку), пока мы не встретим src, а далее внутри этого атрибута выделяем
# путь к файлу. Однако у нашего метода есть недостаток: неправильно закрытую кавычку он тоже выведет. Исправим это
print(match)

text = "<p>Картинка <img src='bg.jpg\"> в тексте</p>"
match = re.findall(r"<img\s+[^>]*src=([\"'])(.+?)\1", text)  # \1 означает, что сюда нужно подставить значение из
# первой сохраняющей скобки. А ставим единицу, потому что сохраняющая скобка у нас первая.
print(match)

"""
В итоге должна быть подобная запись:
(?:выражение)...\i (, где i - натуральное число: 1, 2, 3, ...)

Но не всегда удобно высчитывать, какая по счёту идёт наша скобка. Для этого можно назначать имена сохраняющих скобок:
(?P<имя>...)...(?P=имя)
"""

text = "<p>Картинка <img src='bg.jpg'> в тексте</p>"
match = re.findall(r"(:<img)\s+[^>]*src=(?P<q>[\"'])(.+?)(?P=q)", text)
print(match)

"""
Далее распарсим xml-файл. Сам файл будет находиться в этой же директории. Из этого файла будем выделять lat и lon с 
определёнными значениями. 
"""

with open("map.xml", "r") as f:
    lat = []
    lon = []
    for text in f:
        match = re.findall(r"<point\s+[^>]*?lon=([\"\'])([0-9.,]+)\1\s+[^>]*lat=([\"\'])([0-9.,]+)\1", text)
        if match:
            lon.append(match[0][1])
            lat.append(match[0][3])

    print(lon, lat, sep="\n")

"""
Минусы нашего подхода в том, что если изменятся индексы, то придётся переписывать всю программу. Воспользуемся другой 
конструкцией search, которая возвращает объект, из которого можно получить словарь, содержащий коллекцию сохранённых 
именованных групп. 
"""

with open("map.xml", "r") as f:
    lat = []
    lon = []
    for text in f:
        match = re.search(r"<point\s+[^>]*?lon=([\"\'])(?P<lon>[0-9.,]+)\1\s+[^>]*lat=([\"\'])(?P<lat>[0-9.,]+)\1",
                          text)
        if match:
            v = match.groupdict()
            if "lon" in v and "lat" in v:
                lon.append(v["lon"])
                lat.append(v["lat"])

    print(lon, lat, sep="\n")
