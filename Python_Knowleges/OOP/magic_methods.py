class Point:
    MAX_COORD = 100
    MIN_COORD = 0

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def set_coord(self, x, y):
        if self.MIN_COORD <= x <= self.MAX_COORD:
            self.x = x
            self.y = y

    def set_bound(self, left):
        self.MIN_COORD = left


pt1 = Point(1, 2)
pt1.set_bound(-100)
print(pt1.__dict__)
print(Point.__dict__)
"""
Ошибочное суждение: мы обращаемся к атрибуту MIN_COORD и присваиваем значение left в методе set_bound.
На самом деле когда мы через self записываем то или иное имя атрибута и присваиваем ему какое-либо 
значение, то оператор присваивания создаёт соответствующий атрибут в локальной области видимости, т.е. внутри 
экземпляра класса на который ссылается параметр self. Так работает оператор присваивания в Python. Если атрибут 
MIN_COORD отсутствует, то он создаётся в текущей локальной области видимости. Результат мы видим в принтах выше 
(в pt1 MIN_COORD == -100, а в Point MIN_COORD == 0). 

Реализация написанного далее будет в новом классе ниже.
Правильнее метод set_bound будет сделать методом 
класса, вместо self будет cls (ссылка на класс). Соответственно, через ссылку на класс мы будем обращаться к 
атрибуту MIN_COORD напрямую, и менять его уже в родительском классе. При этом в пространстве имён экземпляра класса
атрибут MIN_COORD не появится.
"""


class NewPoint:
    MAX_COORD = 100
    MIN_COORD = 0

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def set_coord(self, x, y):
        if self.MIN_COORD <= x <= self.MAX_COORD:
            self.x = x
            self.y = y

    @classmethod
    def set_bound(cls, left):
        cls.MIN_COORD = left

    def __getattribute__(self, item):  # Пример использования: мы запрещаем обращаться напрямую к атрибуту x
        if item == 'x':  # строки 88 и 89
            raise ValueError('Доступ запрещён')
        else:
            return object.__getattribute__(self, item)

    def __setattr__(self, key, value):  # с помощью этого магического метода мы можем запретить создавать какой-либо
        # локальный атрибут в экземплярах класса. Например, мы не хотим, чтобы появлялся атрибут с именем z
        if key == 'z':  # пример использования на строках 90-92
            raise AttributeError('Недопустимое имя атрибута')
        else:  # если вместо строчки object.__setattr__(self, key, value) сделаем прямое присваивание self.x = value,
            # то мы попадём в бесконечную рекурсию. Поэтому если требуется какому-то атрибуту явно присвоить значение,
            # то делать это нужно через коллекцию __dict__
            object.__setattr__(self, key, value)
            # self.x = value
            # self.__dict__[key] = value (пример на строках 80 и 81)

    def __getattr__(self, item):  # автоматически срабатывает, пример на строке 93.
        # Даже если прописать атрибут класса (например, MAX_COORD), то мы всё равно не увидим ошибку.
        # Данный метод нужен, чтобы у нас не вылетали ошибки. Ибо если не прописать данный метод, то мы получим
        # AttributeError вместо обычного False (или текста, смотря, что возвращаем)
        return False

    def __delattr__(self, item):  # использование на сроках 94 и 95
        print('__delattr__: ' + item)  # атрибут x остался, ибо в функции __delattr__ мы просто написали какое-то
        # сообщение, а не удалили атрибут
        object.__delattr__(self, item)  # теперь удаление произошло


pt2 = NewPoint(10, 20)
pt2.set_bound(-100)
print(pt2.__dict__)
print(NewPoint.__dict__)
print(pt2.x)  # выдаст ошибку, ибо мы запретили напрямую обращаться к атрибуту x
print(pt2.y)  # выведет число 20
pt2.z = 5  # выдаст ошибку, ибо мы запретили такое именование атрибута
pt2.v = 5
print(pt2.v)
print(pt2.yy)
del pt2.x
print(pt2.__dict__)


"""
Магические методы для атрибутов:
__setattr__(self, key, value) - автоматически вызывается при изменении свойства key класса;
__getattribute__(self, item) - автоматически вызывается при получении свойства класса с именем item;
__getattr__(self, item) - автоматически вызывается при получении несуществующего свойства item класса;
__delattr__(self, item) - автоматически вызывается при удалении свойства item (неважно: существует ли оно).
"""

