import timeit


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


pt = Point(1, 2)
pt.y = 10
pt.z = 5
print(pt.x)
print(pt.__dict__)  # Командами выше мы можем спокойно оперировать свойствами экземпляра класса. Но что если мы хотим
# объявить класс точки на плоскости, чтобы у его экземпляров были локальными свойствами только x и y?


class Point2D:
    __slots__ = ('x', 'y')  # Прописываем разрешённые локальные свойства. Именно локальные свойства, а не атрибуты.
    MAX_COORD = 100

    def __init__(self, x, y):
        self.x = x
        self.y = y


pt2 = Point2D(10, 50)
print(pt2.MAX_COORD)  # Как и говорили выше, на атрибуты ограничений нет.
pt2.x = 100
del pt2.y
pt2.y = 80
print(pt2.x, pt2.y)  # К прежним локальный свойствам можем обращаться, менять и даже удалять их.
pt2.z = 30  # AttributeError: 'Point2D' object has no attribute 'z'.
print(pt2.__dict__)  # AttributeError: 'Point2D' object has no attribute '__dict__'. Did you mean: '__dir__'?
"""
Теперь мы не можем создавать новые локальные свойства, и теперь не доступна коллекция __dict__ (ибо эта коллекция 
отвечает как раз за локальные свойства). Повторимся: на атрибуты класса ограничение __slots__ не распространяются.
Кроме того, помимо ограничений создаваемых локальных свойств коллекции ('x', 'y'), __slots__ также уменьшает объём 
памяти занимаемых экземплярами класса. Переопределим класс, чтобы убрать всё лишнее и замерим память для Point и Point2D
"""


class Point2D:
    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y


pt2 = Point2D(-5, -10)

print(pt.__sizeof__() + pt.__dict__.__sizeof__())  # Магический метод говорит, сколько памяти занимает пространство имён
# Point + коллекция __dict__, которая тоже занимает определённую память. В сумме получили 304 байта.
print(pt2.__sizeof__())  # В свою очередь, Point2D будет ограничиваться только пространством имён, ибо метода __dict__
# он не содержит. Получили 32 байта.

"""
Более того, коллекция __slots__ ещё и ускоряет работу с коллекциями ('x', 'y'). Чтобы в этом убедиться, переопределим 
классы с новым методом.
"""


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def calc(self):
        self.x += 1
        del self.y
        self.y = 0


class Point2D:
    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def calc(self):
        self.x += 1
        del self.y
        self.y = 0


p = Point(1, 2)
p2 = Point2D(10, 20)

t1 = timeit.timeit(p.calc)
t2 = timeit.timeit(p2.calc)
print(t1, t2)  # 0.06530619994737208 0.06327729998156428
"""
По итогу мы получили 3 особенности работы коллекции __slots__:
1) ограничение создаваемых локальных свойств;
2) уменьшение занимаемой памяти;
3) ускорение работы с локальными свойствами.
"""
