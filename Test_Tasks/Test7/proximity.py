# Язык	                Ограничение времени	Ограничение памяти	Ввод	Вывод
# Все языки	            4 секунды	        256Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
# Golang 1.21.0	        2 секунды	        256Mb
# Clang 16.0.0 C++20	1 секунда	        256Mb
# GNU GCC 12.2 C++20	1 секунда	        256Mb

# Определим близость двух целочисленных массивов как длину их наибольшего совпадающего префикса (см. примечание).
# Примеры:
# Близость [1, 2, 1, 3] и [1, 2, 3, 2] равна 2 — префикс [1, 2] совпадает;
# Близость [1, 2, 3] и [3, 2, 1] равна 0.
# Дано n целочисленных массивов a1, a2, …, an.
# Необходимо вычислить сумму близостей массивов ai и aj для каждой пары 1 ≤ i < j ≤ n.

# Формат ввода
# Первая строка содержит одно целые число n (1 ≤ n ≤ 3 ⋅ 10^5) — количество массивов.
# Каждый массив задаётся двумя строками.
# Первая строка описания массива содержит единственное целое число ki (1 ≤ k ≤ 3 ⋅ 10^5) — размер i-го массива.
# Вторая строка описания содержит ki целых чисел aij (1 ≤ aij ≤ 109) — элементы i-го массива.
# Гарантируется, что ∑n(i = 1)ki ≤ 3 ⋅ 10^5.

# Формат вывода
# Выведите единственное целое число — суммарную попарную близость массивов.

# Пример 1
# Ввод
# 3
# 2
# 1 2
# 2
# 1 3
# 3
# 1 2 3
# Вывод
# 4

# Пример 2
# Ввод
# 3
# 1
# 5
# 2
# 1 2
# 3
# 5 1 2
# Вывод
# 1

# Примечания
# Префиксом длины p массива a назовем p первых элементов массива a.
# Пример: у массива [1, 2, 1] есть 4 различных префикса:
# Длины 0 — [] (пустой);
# Длины 1 — [1];
# Длины 2 — [1, 2];
# Длины 3 — [1, 2, 1];
# Рассмотрим близости массивов в первом тестовом примере:
# [1, 2] и [1, 3]: общий префикс [1] — близость равна 1;
# [1, 2] и [1, 2, 3]: общий префикс [1, 2] — близость равна 2;
# [1, 3] и [1, 2, 3]: общий префикс [1] — близость равна 1;
# Суммарно получается 1 + 2 + 1 = 4.
# Рассмотрим близости массивов во втором тестовом примере:
# [5] и [1, 2]: общий префикс [] — близость равна 0;
# [5] и [5, 1, 2]: общий префикс [5] — близость равна 1;
# [1, 2] и [5, 1, 2]: общий префикс [] — близость равна 0;
# Суммарно получается 0 + 1 + 0 = 1.
